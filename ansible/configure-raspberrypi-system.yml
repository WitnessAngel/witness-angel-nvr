---
- name: Install and configure system dependencies, as root
  hosts: all
  become: yes
  tasks:
  - name: Update Package Cache (apt/Ubuntu)
    apt:
      update_cache: yes
  - name: Install APT packages for python3, ffmpeg, PIL, RTC/I2C, NTP, UFW, and build tools
    package:
      name: ["python3-pip", "virtualenv", "ffmpeg", "git", "i2c-tools", "chrony", "ufw",
             "build-essential", "python3-dev", "libssl-dev", "libffi-dev", "libjpeg-dev", "zlib1g-dev",
             "cargo"]  # Rust is required by python-cryptography build system
      state: present
  - name: Install APT packages for Kivy
    package:
      name: ["libsdl2-dev", "libsdl2-image-dev", "libsdl2-mixer-dev", "libsdl2-ttf-dev", "pkg-config", "libgl1-mesa-dev",
            "libgles2-mesa-dev", "libgstreamer1.0-dev", "libgstreamer1.0-dev", "git-core",
            "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "gstreamer1.0-plugins-ugly",
            "gstreamer1.0-omx", "gstreamer1.0-alsa", "python-dev", "libmtdev-dev", "xclip", "xsel"]
      state: present
  - name: Enable RTC overlay in config.txt
    lineinfile:
      path: /boot/config.txt
      line: 'dtoverlay=i2c-rtc,ds1307'
      insertafter: '[all]'
  - name: Enable RTC kernel module
    lineinfile:
      path: /etc/modules
      line: 'rtc-ds1307'
  - name: Remove wrong skipping in hwclock-set script
    copy:
      src: hwclock-set
      dest: /lib/udev/hwclock-set
  - name: Copy custom boot checkups script to /etc
    copy:
      src: custom_boot_checkups.sh
      dest: /etc/custom_boot_checkups.sh
  - name: Create a cron entry for custom boot checkups script
    cron:
      name: "custom-checkups-on-boot"  # Identifies crontab entry
      special_time: reboot
      job: "bash /etc/custom_boot_checkups.sh"
  - name: Set static IP for ethernet interface
    blockinfile:
      path: /etc/dhcpcd.conf
      state: "present"
      block: |
        # define static profile
        profile static_eth0
        static ip_address=192.168.10.23/24
        static routers=192.168.10.1
        static domain_name_servers=192.168.10.1
        nogateway

        # fallback to static profile on eth0
        interface eth0
        fallback static_eth0
  - name: Configure chrony as NTP server for IP camera
    blockinfile:
      path: /etc/chrony/chrony.conf
      state: "present"
      block: |
        local stratum 8
        manual
        allow 192.168.10.0/24
  - name: Setup UFW Firewall
    script:
      cmd: files/setup_ufw.sh
  - name: Install bcm2835 lib for Epaper screen
    script:
      cmd: files/install_bcm2835_lib.sh
      chdir: "/var/tmp/"
      creates: "/usr/local/lib/libbcm2835.a"

- name: Install and configure python dependencies of wa-nvr, as user
  hosts: all
  tasks:
  - name: Upgrade pip and basic build helpers in venv
    pip:
      name: ["pip==21.3.1", "setuptools", "wheel", ]
      virtualenv: "{{ ansible_env.HOME }}/.venv"
      virtualenv_python: "python3"
  - name: Install misc dependencies into venv
    pip:
      name: ["poetry", "pillow", "numpy", "wiringpi==2.60.1",  # For E-paper control
             "git+https://github.com/waveshare/e-Paper.git#egg=waveshare_epd&subdirectory=RaspberryPi_JetsonNano/python"]
             # e-Paper.git installs RPi.GPIO and spidev, but without pinned versions so beware!
      virtualenv: "{{ ansible_env.HOME }}/.venv"
      virtualenv_python: "python3"
    environment:
      CFLAGS: "-fcommon"  # Necessary for RPi.GPIO compilation
  - name: Clone wa-nvr git repository
    git:
      repo: 'https://github.com/WitnessAngel/witness-angel-nvr.git'
      dest: "{{ ansible_env.HOME }}/witness-angel-nvr"
      version: "main"
      #depth: "1" - shallow clones are impractical
  - name: Install wa-nvr dependencies with poetry
    script:
      cmd: files/install_poetry_dependencies.sh
      chdir: "{{ ansible_env.HOME }}/witness-angel-nvr/"
    environment:
      MAKEFLAGS: "-j2"  # Prevent flood of memory by 4 GCC processes
  - name: Create a cron entry for NVR service launch at boot
    cron:
      name: "wanvr-launch-boot"
      special_time: reboot
      job: "{{ ansible_env.HOME }}/.venv/bin/python {{ ansible_env.HOME }}/witness-angel-nvr/src/resurrect_service.py"
  - name: Create a cron entry for NVR service periodic re-launch
    cron:
      name: "wanvr-launch-periodic"
      minute: "*/5"
      job: "{{ ansible_env.HOME }}/.venv/bin/python {{ ansible_env.HOME }}/witness-angel-nvr/src/resurrect_service.py"
  - name: Copy desktop shortcut to WANVR GUI
    copy:
      src: wanvr.desktop
      dest: "{{ ansible_env.HOME }}/Desktop/wanvr.desktop"
# TODO later : put MOTD for SSH connections!

